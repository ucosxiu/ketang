<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018-11-5
 * Time: 15:24
 */
namespace app\admin\controller;

//课程页
use app\common\model\MailerTemplate;
use app\common\model\Option;
use app\common\validate\MailerTemplateValidate;
use think\db\Where;
use think\facade\Lang;

class Course extends Adminbase{
    function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    function index() {
        if (!$this->request->isAjax()) {
            return $this->fetch();
        } else {

            $course_model = model('goods');
            $where = [];

            $order = 'goods_id desc';
            $where['is_delete'] = 0;
            $paginate = $course_model->where($where)->order($order)->paginate()->toArray();
            $result = [];
            $result['code'] = 1;
            $result['msg'] = "";
            $result['count'] = $paginate['total'];
            $result['data'] = $paginate['data'];
            echo json_encode($result);
            exit;
        }
    }

    function add() {
        if (!$this->request->isAjax()) {
            $courseclass_model = model('courseclass');
            $courseclasss = $courseclass_model->getAllChildByParentId(0);
            $this->assign('courseclasss', $courseclasss);

            $this->assign('teacheres', model('teacher')->where(['teacher_state' => 1])->all());
            $this->assign('pid', 0);
            return $this->fetch();
        } else {
            $param = $this->request->param();

            $course_model = model('goods');
            if ($course_model->addGoods($param)) {
                $this->success('添加成功', Url('course/index'));
            } else {
                $this->error('添加失败');
            }
        }
    }

    function edit() {
        $id = $this->request->param('id', 0, 'intval');
        if (!$id) {
            $this->error(lang('param_error'));
        }

        $course_model = model('goods');
        $course = $course_model->with('teacherids')->get($id);
        if (!$course) {
            $this->error(lang('param_error'));
        }

        if (!$this->request->isAjax()) {
            $courseclass_model = model('courseclass');
            $courseclasss = $courseclass_model->getAllChildByParentId(0);
            $this->assign('courseclasss', $courseclasss);

            $this->assign('teacheres', model('teacher')->where(['teacher_state' => 1])->all());
            if (!$course->goods_price) {
                $course->is_free = 1;
            } else {
                $course->is_free = 0;
            }
            $this->assign('course', $course);
            $this->assign('pid', $course['cc_id']);
            return $this->fetch();
        } else {
            $param = $this->request->param();

            $course_model = model('goods');
            if ($course_model->editGoods($param, $id)) {
                $this->success('编辑成功', Url('course/index'));
            } else {
                $this->error('编辑成功失败');
            }
        }
    }

    function chapter() {
        $id = $this->request->param('id', 0, 'intval');
        if (!$id) {
            $this->error(lang('param_error'));
        }

        $course_model = model('goods');
        $course = $course_model->with(['teacherids', 'chapter'])->get($id)->toArray();
        if (!$course) {
            $this->error(lang('param_error'));
        }

        if ($course['goods_type'] == 0) {
            $this->error('报名类型不能设置章节');
        }

        if (!$this->request->isAjax()) {
            $this->assign('course', $course);
            return $this->fetch();
        } else {
            $old_chapter_names = $this->request->param('old_chapter_names');
            $old_chapter_links = $this->request->param('old_chapter_links');
            $old_chapter_attachments = $this->request->param('old_chapter_attachments');

            if ($old_chapter_names) {
                $keys = array_keys($old_chapter_names);
                $where = new Where();
                $where['goods_id'] = $id;
                $where['chapter_id'] = ['not in', $keys];
                model('goodschapter')->where($where)->delete();
                $olds = [];

                foreach ($old_chapter_names as $k => $chapter_name) {
                    $chapter_name = trim($chapter_name);
                    $chapter_link = trim($old_chapter_links[$k]);
                    $chapter_attachment = trim($old_chapter_attachments[$k]);
                    if ($chapter_name && $chapter_link) {
                        model('goodschapter')->where([
                            'goods_id' => $id,
                            'chapter_id' => $k
                        ])->update([
                            'chapter_name' => $chapter_name,
                            'chapter_link' => $chapter_link,
                            'chapter_attachment' => $chapter_attachment
                        ]);
                    }
                }
            }


            $new_chapter_names = $this->request->param('new_chapter_names');
            $new_chapter_links = $this->request->param('new_chapter_links');
            $new_chapter_attachments = $this->request->param('new_chapter_attachments');

            $chapters = [];
            if ($new_chapter_names) {
                foreach ($new_chapter_names as $k => $chapter_name) {
                    $chapter_name = trim($chapter_name);
                    $chapter_link = trim($new_chapter_links[$k]);
                    $chapter_attachment = trim($new_chapter_attachments[$k]);
                    if ($chapter_name && $chapter_link) {
                        array_push($chapters, [
                            'goods_id' => $id,
                            'chapter_name' => $chapter_name,
                            'chapter_link' => $chapter_link,
                            'chapter_attachment' => $chapter_attachment,
                        ]);
                    }
                }
            }

            if (!$chapters) {
                $this->success('保存成功');
            }

            if (model('goodschapter')->insertAll($chapters)) {
                $this->success('保存成功');
            } else {
                $this->error('保存失败');
            }
        }
    }

    public function up() {
        $file = request()->file('file');
        if (!$file) {
            $this->error('请上传文件');
            return resultArray(['error' => '请上传文件']);
        }
        $ds = '/';
        $root_path = SITE_PATH . DIRECTORY_SEPARATOR .'public';
        $info = $file->validate([])->move($root_path . DIRECTORY_SEPARATOR . 'assets' . DIRECTORY_SEPARATOR . 'chapter');
        if ($info) {
            $url = 'assets'. DIRECTORY_SEPARATOR . 'avatar'. DIRECTORY_SEPARATOR . $info->getSaveName();
            $url = str_replace('\\', '/', $url);
            $this->success('上传成功', '', ['url' =>  $url, 'link' => $this->request->rootUrl(true) . $ds . $url]);
        }


        $this->error($file->getError());
    }

    function del() {
        $id = $this->request->param('id', 0, 'intval');
        $goods_model = model('goods');
        if ($goods_model->where(['goods_id'=>$id])->update(['is_delete' => 1])) {
            $this->success(lang('delete_success'));
        }
        $this->error(lang('delete_error'));
    }

    //热门
    function hot() {
        if ($this->request->isAjax()) {
            $id = $this->request->param('id', 0, 'intval');
            $voucher_model = model('goods');
            $is_hot = $this->request->param('is_hot', '0', 'intval');
            if ($voucher_model->save(['is_hot' => $is_hot], ['goods_id'=>$id])) {
                $this->success(lang('success'));
            }
            $this->error(lang('error'));
        }
    }

    //推荐
    function recommend() {
        if ($this->request->isAjax()) {
            $id = $this->request->param('id', 0, 'intval');
            $voucher_model = model('goods');
            $is_recommend = $this->request->param('is_recommend', '0', 'intval');
            if ($voucher_model->save(['is_recommend' => $is_recommend], ['goods_id'=>$id])) {
                $this->success(lang('success'));
            }
            $this->error(lang('error'));
        }

    }
}
