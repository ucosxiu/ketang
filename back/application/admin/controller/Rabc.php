<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/3/28
 * Time: 21:47
 */
namespace app\admin\controller;

use app\common\model\Menu;
use app\common\model\Role;
use app\common\model\Rolepriv;
use org\Tree;
use think\Lang;

class Rabc extends Adminbase{
    function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //权限管理
    function authorize() {
        $id = input('param.id');
        if (!$id) {
            $this->error('parameter_error');
        }

        $role = Role::get($id);
        if (!$role) {
            $this->error('parameter_error');
        }

        if (!$this->request->isPost()) {
            $privs = $this->priv($id);

            $this->assign('privs', $privs);
            return $this->fetch();
        } else {
            if (is_array($_POST['menuid']) && count($_POST['menuid']) > 0) {

                //删除
                Rolepriv::where('roleid','=',$id)->delete();

                foreach ($_POST['menuid'] as $menuid) {
                    $menu = Menu::get($menuid);
                    if ($menu) {
                        $rabc_priv_model           = new Rolepriv();
                        $rabc_priv_model->roleid     = $id;
                        $rabc_priv_model->m    = $menu['m'];
                        $rabc_priv_model->c    = $menu['c'];
                        $rabc_priv_model->a    = $menu['a'];
                        $rabc_priv_model->save();
                    }
                }

                $this->success(lang('success'));
            } else {
                $this->err(lang('error'));
            }
        }
    }

    private function priv($roleid) {
        $menus = Menu::where([])->field('menuid id,menuname name, parentid, m, c, a, listorder, status')->select()->toArray();
        $tree = new Tree();
        $tree->icon = array('│ ', '├─ ', '└─ ');
        $tree->nbsp = '&nbsp;&nbsp;&nbsp;';

        $priv_data = Rolepriv::all(['roleid'=>$roleid])->toArray();

        $_menus = [];
        $newmenus = [];
        if(!empty($menus)) {
            foreach ($menus as $m => $menu) {
                $newmenus[$menu['id']] = $menu;
            }

            foreach ($menus as $menu) {
                if (!$menu) {
                    continue;
                }
                $menu['checked'] = $this->_is_checked($menu, $roleid, $priv_data) ? ' checked' : '';
                $menu['level'] = $this->_get_level($menu['id'], $newmenus);
                $menu['parentid_node'] = ($menu['parentid'])? ' class="child-of-node-'.$menu['parentid'].'"' : '';
                $_menus[$menu['id']] = $menu;
            }
        }

        $tree->init($_menus);
        $str = "<tr id='node-\$id'  \$parentid_node>
                       <td style='padding-left:30px;'>\$spacer<input type='checkbox' name='menuid[]' value='\$id' level='\$level' \$checked onclick='javascript:checknode(this);'> \$name</td>
	    			</tr>";
        $privs = $tree->get_tree(0, $str);

        return $privs;

    }

    /**
     *  检查指定菜单是否有权限
     * @param array $menu menu表中数组
     * @param int $roleid 需要检查的角色ID
     */
    private function _is_checked($menu, $roleid, $priv_data) {
        $priv_arr = array('m','c','a');
        if($menu['m'] == '') return false;
        foreach($menu as $key=>$value){
            if(!in_array($key,$priv_arr)) unset($menu[$key]);
        }
        $menu['roleid'] = $roleid;

        $info = in_array($menu, $priv_data);
        if($info){
            return true;
        } else {
            return false;
        }
    }


    /**
     * 获取菜单深度
     * @param $id
     * @param $array
     * @param $i
     */
    protected function _get_level($id, $array = array(), $i = 0) {
        if ($array[$id]['parentid']==0 || empty($array[$array[$id]['parentid']]) || $array[$id]['parentid']==$id){
            return  $i;
        }else{
            $i++;
            return $this->_get_level($array[$id]['parentid'],$array,$i);
        }

    }

}
